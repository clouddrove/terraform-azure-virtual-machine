---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name : Terraform AZURE VIRTUAL MACHINE

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-azure-virtual-machine

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/clouddrove/terraform-azure-virtual-machine.svg"
    url: "https://github.com/clouddrove/terraform-azure-virtual-machine/releases/latest"
  - name: "tfsec"
    image: "https://github.com/clouddrove/terraform-azure-virtual-machine/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-azure-virtual-machine/actions/workflows/tfsec.yml"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"

#  description of this project
description: |-
  Terraform module to create virtual machine resource on AZURE.
# extra content
include:
  - "terraform.md"

# How to use this project
usage: |-
  Here are some examples of how you can use this module in your inventory structure:
  ### Linux Virtual Machine
  ```hcl
    module "virtual-machine" {
    source                          = "clouddrove/virtual-machine/azure"
    version                         = "1.0.0"
    name                            = "app"
    environment                     = "test"
    label_order                     = ["environment", "name"]
    is_vm_linux                     = true
    enabled                         = true
    machine_count                   = 1
    resource_group_name             = module.resource_group.resource_group_name
    location                        = module.resource_group.resource_group_location
    disable_password_authentication = true
    identity_enabled                = true
    user_object_id                  = {
    "user1" = {
      role_definition_name = "Virtual Machine Administrator Login"
      principal_id         = "xxxxxxxx"
    },
     }
    vm_identity_type                = "SystemAssigned"
    ## Network Interface
    subnet_id                     = module.subnet.default_subnet_id
    private_ip_address_version    = "IPv4"
    private_ip_address_allocation = "Static"
    primary                       = true
    private_ip_addresses          = ["10.0.1.4"]
    #nsg
    network_interface_sg_enabled = true
    network_security_group_id    = module.security_group.id
    ## Availability Set
    availability_set_enabled     = true
    platform_update_domain_count = 7
    platform_fault_domain_count  = 3
    ## Public IP
    public_ip_enabled = true
    sku               = "Basic"
    allocation_method = "Static"
    ip_version        = "IPv4"
    ## Virtual Machine
    vm_size        = "Standard_B1s"
    public_key     = "ssh-rsa AAAa4xE2PP0/kb5SsMMpJTZmhhJYA2YW/E=" # Enter valid public key here
    admin_username = "ubuntu"
    # admin_password                = "P@ssw0rd!123!" # It is compulsory when disable_password_authentication = false
    caching                         = "ReadWrite"
    disk_size_gb                    = 30
    storage_image_reference_enabled = true
    image_publisher                 = "Canonical"
    image_offer                     = "0001-com-ubuntu-server-jammy"
    image_sku                       = "22_04-lts-gen2"
    image_version                   = "latest"
    enable_disk_encryption_set      = false
    #  key_vault_id                   = module.key_vault.id
    addtional_capabilities_enabled = true
    ultra_ssd_enabled              = false
    enable_encryption_at_host      = true
    key_vault_rbac_auth_enabled    = false
    data_disks = [
      {
        name                 = "disk1"
        disk_size_gb         = 100
        storage_account_type = "StandardSSD_LRS"
      }
    ]
    # Extension
    extensions = [{
      extension_publisher            = "Microsoft.Azure.ActiveDirectory"
      extension_name                 = "AADLogin"
      extension_type                 = "AADSSHLoginForLinux"
      extension_type_handler_version = "1.0"
      auto_upgrade_minor_version     = true
      automatic_upgrade_enabled      = false
    }]

    #### enable diagnostic setting
    diagnostic_setting_enable  = false
    log_analytics_workspace_id = ""
   }
  ```
  ### Windows Virtual Machine
  ```hcl
    module "virtual-machine" {
    source                         = "clouddrove/virtual-machine/azure"
    version                        = "1.0.0"
    name                = "app"
    environment         = "test"
    is_vm_windows       = true
    enabled             = true
    machine_count       = 1
    resource_group_name = module.resource_group.resource_group_name
    location            = module.resource_group.resource_group_location
    create_option       = "Empty"
    disk_size_gb        = 128
    provision_vm_agent  = true
    ## Network Interface
    subnet_id                     = module.subnet.default_subnet_id
    private_ip_address_version    = "IPv4"
    private_ip_address_allocation = "Dynamic"
    primary                       = true
    #nsg
    network_interface_sg_enabled = true
    network_security_group_id    = module.security_group.id
    ## Availability Set
    availability_set_enabled     = true
    platform_update_domain_count = 7
    platform_fault_domain_count  = 3
    ## Public IP
    public_ip_enabled = true
    sku               = "Basic"
    allocation_method = "Static"
    ip_version        = "IPv4"
    computer_name     = "app-win-comp"
    vm_size           = "Standard_B1s"
    admin_username    = "azureadmin"
    admin_password    = "Password@123"
    image_publisher   = "MicrosoftWindowsServer"
    image_offer       = "WindowsServer"
    image_sku         = "2019-Datacenter"
    image_version     = "latest"
    caching           = "ReadWrite"
    data_disks = [
      {
        name                 = "disk1"
        disk_size_gb         = 128
        storage_account_type = "StandardSSD_LRS"
      }
    ]

    # Extension
    extensions = [{
      extension_publisher            = "Microsoft.Azure.Security"
      extension_name                 = "CustomExt"
      extension_type                 = "IaaSAntimalware"
      extension_type_handler_version = "1.3"
      auto_upgrade_minor_version     = true
      automatic_upgrade_enabled      = false
      settings                       = <<SETTINGS
                                          {
                                            "AntimalwareEnabled": true,
                                            "RealtimeProtectionEnabled": "true",
                                            "ScheduledScanSettings": {
                                                "isEnabled": "false",
                                                "day": "7",
                                                "time": "120",
                                                "scanType": "Quick"
                                            },
                                            "Exclusions": {
                                                "Extensions": "",
                                                "Paths": "",
                                                "Processes": ""
                                            }
                                          }
                                        SETTINGS
    }]
    #### enable diagnostic setting
    diagnostic_setting_enable  = false
    log_analytics_workspace_id = ""
   }
  ```
